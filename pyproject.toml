[tool.poetry]
name = "shagunintelligence"
version = "2.0.0"
description = "AI-powered algorithmic trading platform with multi-agent system"
authors = ["Ajay Rajput <iamapsrajput@outlook.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/iamapsrajput/shagunintelligence"
repository = "https://github.com/iamapsrajput/shagunintelligence"
documentation = "https://docs.shagunintelligence.com"
keywords = ["trading", "ai", "algorithmic", "finance", "agents"]
package-mode = false
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]

[tool.poetry.dependencies]
python = ">=3.11,<=3.13"
# FastAPI and web framework
fastapi = "^0.116.1"
uvicorn = { extras = ["standard"], version = "^0.24.0" }
pydantic = "^2.7.4"
pydantic-settings = "^2.1.0"

# AI and LLM Integration
openai = "^1.0.0"

# CrewAI framework (latest version - independent of LangChain)
crewai = "^0.157.0"
crewai-tools = "^0.60.0"

# LangChain for additional LLM utilities (optional)
langchain = "^0.3.27"
langchain-openai = "^0.2.14"

# Zerodha Kite Connect SDK
kiteconnect = "^5.0.1"

# Sentiment Analysis
textblob = "^0.17.1"
aiohttp = "^3.12.14"

# News and NLP
pytz = "^2024.1"
feedparser = "^6.0.11"

# Database and ORM
sqlalchemy = "^2.0.42"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
asyncpg = "^0.29.0"
redis = "^5.0.1"

# Data processing and analysis
pandas = "^2.1.4"
numpy = "^1.26.4"
scipy = "^1.16.0"
simpleeval = "^0.9.13"
jinja2 = "^3.1.6"
yfinance = "^0.2.28"

# Machine Learning
scikit-learn = "^1.5.0"
joblib = "^1.3.2"

# HTTP clients and utilities
httpx = "^0.28.1"
requests = "^2.32.4"
websockets = "^12.0"

# Environment and configuration
python-dotenv = "^1.0.0"
python-multipart = "^0.0.20"

# Logging and monitoring
loguru = "^0.7.2"
prometheus-client = "^0.19.0"

# Date and time handling
python-dateutil = "^2.8.2"

# Security
python-jose = { extras = ["cryptography"], version = "^3.5.0" }
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
email-validator = "^2.2.0"

# Docker health checks
psutil = "^5.9.6"

# Task scheduling
apscheduler = "^3.11.0"

# File operations
aiofiles = "^24.1.0"

# Performance monitoring
memory-profiler = "^0.61.0"

# Visualization
matplotlib = "^3.10.3"

# Additional dependencies for data sources
cryptography = "^44.0.1"

[tool.poetry.group.dev.dependencies]
# Development and testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"

# Code quality and linting
ruff = "^0.1.9"
black = "^24.3.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"

# Security scanning
bandit = "^1.7.5"
safety = "^3.0.1"
pip-audit = "^2.6.1"

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.3"

# Development utilities
ipython = "^8.18.1"
jupyter = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "S101", # use of assert detected
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"] # Allow asserts in tests

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["kiteconnect.*", "textblob.*", "feedparser.*", "yfinance.*", "ta.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "requires_api: marks tests that require external API access",
]

[tool.coverage.run]
source = ["app", "agents", "services", "backend"]
omit = ["*/tests/*", "*/venv/*", "*/__pycache__/*", "*/migrations/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
