name: CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: algohive
  EKS_CLUSTER_NAME: algohive-cluster

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.algohive.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest
          
      - name: Update kustomization
        run: |
          cd k8s/overlays/staging
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          ./kustomize edit set image algohive/app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
          kubectl apply -k k8s/overlays/staging
          kubectl rollout status deployment/algohive-app -n algohive-staging
          
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.algohive.com/api/v1/health || exit 1
          
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: deploy-staging
    environment:
      name: production
      url: https://algohive.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Create backup
        run: |
          kubectl exec -n algohive postgres-0 -- pg_dump -U algohive algohive | gzip > backup-$(date +%Y%m%d-%H%M%S).sql.gz
          aws s3 cp backup-*.sql.gz s3://algohive-backups/pre-deployment/
          
      - name: Update kustomization
        run: |
          cd k8s/overlays/production
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          ./kustomize edit set image algohive/app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Deploy to EKS (Blue/Green)
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME-prod --region $AWS_REGION
          
          # Deploy to green environment
          kubectl apply -k k8s/overlays/production-green
          kubectl rollout status deployment/algohive-app-green -n algohive
          
          # Run health checks
          GREEN_URL=$(kubectl get service algohive-app-green -n algohive -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          for i in {1..10}; do
            if curl -f http://$GREEN_URL/api/v1/health; then
              echo "Green deployment healthy"
              break
            fi
            sleep 10
          done
          
          # Switch traffic to green
          kubectl patch service algohive-app -n algohive -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 60
          
          # Update blue deployment
          kubectl apply -k k8s/overlays/production-blue
          
      - name: Run production tests
        run: |
          npm install -g newman
          newman run tests/postman/production-tests.json --env-var BASE_URL=https://algohive.com
          
      - name: Create release notes
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            - Automated deployment to production
            - Docker image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}
            
            ## Deployment Details
            - Cluster: ${{ env.EKS_CLUSTER_NAME }}-prod
            - Region: ${{ env.AWS_REGION }}
            - Time: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false
          
      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }} for version ${{ github.ref_name }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Rollback deployment
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME-prod --region $AWS_REGION
          
          # Switch traffic back to blue
          kubectl patch service algohive-app -n algohive -p '{"spec":{"selector":{"version":"blue"}}}'
          
          echo "Rollback completed - traffic switched to blue deployment"
          
      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Production deployment rolled back for version ${{ github.ref_name }}"
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}